<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.sunjianbo.com</id>
    <title>孙建博的小站</title>
    <updated>2020-04-01T07:09:34.767Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.sunjianbo.com"/>
    <link rel="self" href="https://www.sunjianbo.com/atom.xml"/>
    <subtitle>互联网、编程、生活感悟，在这里希望你我都能有所收获，得到提升</subtitle>
    <logo>https://www.sunjianbo.com/images/avatar.png</logo>
    <icon>https://www.sunjianbo.com/favicon.ico</icon>
    <rights>All rights reserved 2020, 孙建博的小站</rights>
    <entry>
        <title type="html"><![CDATA[telegram频道发布增加点赞评论等反馈功能]]></title>
        <id>https://www.sunjianbo.com/telegram-add-reactions/</id>
        <link href="https://www.sunjianbo.com/telegram-add-reactions/">
        </link>
        <updated>2020-04-01T02:57:10.000Z</updated>
        <content type="html"><![CDATA[<p>我自己经营了一个telegram的订阅频道:<a href="https://t.me/alittlefun">有点意思@alittlefun</a>用来分享一些有意思的图片什么的.</p>
<p>之前看到别人的订阅频道有emojies的点赞功能,觉得很好,类似这样:</p>
<figure data-type="image" tabindex="1"><img src="http://static.sunjianbo.com/20200331110800.png" alt="" loading="lazy"></figure>
<p>所以想要放到自己频道来用,但是上网找了一圈只找到一个@like机器人可以满足我的要求,原文:<a href="http://x.2129.n8.nabble.com/Telegram-td30.html">http://x.2129.n8.nabble.com/Telegram-td30.html</a></p>
<p>但是它有一个问题,就是发出来的内容是通过转发方式出来的,这样就会在上面有个标志:</p>
<figure data-type="image" tabindex="2"><img src="http://static.sunjianbo.com/20200331111030.png" alt="" loading="lazy"></figure>
<p>处女座的我哪受得了这个啊.于是绞尽脑汁一顿折腾,终于找到了方法(＾－＾)V</p>
<h2 id="1使用botfather创建一个发布bot">1.使用@BotFather创建一个发布bot</h2>
<p>搜索到@BotFather --&gt; <code>/start</code> --&gt; <code>/newbot</code> --&gt; 输入自定义id --&gt; 输入自定义username</p>
<figure data-type="image" tabindex="3"><img src="http://static.sunjianbo.com/20200331111841.png" alt="step1" loading="lazy"></figure>
<h2 id="2使用controllerbot-新增并管理频道">2.使用@ControllerBot 新增并管理频道</h2>
<h3 id="21搜索到controllerbot-start-addchannel-复制上图标红位置的在botfather创建的token到controllerbot-粘贴">2.1搜索到@ControllerBot --&gt; <code>/start</code> --&gt; <code>/addchannel</code>--&gt; 复制上图标红位置的在BotFather创建的token到ControllerBot 粘贴</h3>
<figure data-type="image" tabindex="4"><img src="http://static.sunjianbo.com/20200331112452.png" alt="addchannel" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="http://static.sunjianbo.com/20200331112830.png" alt="token" loading="lazy"></figure>
<h3 id="22按照提示到自己的频道去把刚刚创建的bot增加为管理员">2.2按照提示到自己的频道去把刚刚创建的bot增加为管理员</h3>
<p>自己频道右上角Manage Channel --&gt; 点击Administrators --&gt; 点击左下角ADD ADMINISTRATOR --&gt; 搜索刚刚创建的bot(eg:alittlefun_bot)--&gt;完成管理员添加</p>
<h3 id="23转发一条自己频道的信息给controllerbot">2.3转发一条自己频道的信息给@ControllerBot</h3>
<h3 id="24输入城市名来确定时区直接输入shanghai">2.4输入城市名来确定时区,直接输入<code>shanghai</code></h3>
<figure data-type="image" tabindex="6"><img src="http://static.sunjianbo.com/20200331113549.png" alt="" loading="lazy"></figure>
<h3 id="25设置完成">2.5设置完成</h3>
<h2 id="3发布内容">3.发布内容</h2>
<h3 id="31点击上图create-post按钮或者手动打开之前创建的机器人alittlefun_bot-start-发送内容">3.1点击上图<strong>Create Post</strong>按钮或者手动打开之前创建的机器人(@alittlefun_bot) --&gt; <code>/start</code> --&gt; 发送内容</h3>
<figure data-type="image" tabindex="7"><img src="http://static.sunjianbo.com/20200331131340.png" alt="" loading="lazy"></figure>
<h3 id="32点击add-reactions按钮发送需要的emoji表情过去">3.2点击<strong>Add Reactions</strong>按钮,发送需要的emoji表情过去</h3>
<h3 id="33最后点击文本框下面send按钮设定发送时机参考图片">3.3最后点击文本框下面Send按钮,设定发送时机(参考图片)</h3>
<figure data-type="image" tabindex="8"><img src="http://static.sunjianbo.com/20200331132137.png" alt="" loading="lazy"></figure>
<h2 id="4总结">4.总结</h2>
<p>经过以上步骤即可实现在自己的频道发布带emoji点赞反馈的内容.</p>
<p>步骤可以简单归纳为</p>
<ol>
<li>
<p>@BotFather创建自定义bot</p>
</li>
<li>
<p>@ControllerBot绑定自定义bot和频道</p>
</li>
<li>
<p>在自定义bot发布内容</p>
</li>
</ol>
<p>同时细心的小伙伴一定也发现了通过这个bot还可以实现<strong>附加媒体</strong>,<strong>增加评论</strong>,<strong>附加URL</strong>以及<strong>定时发送</strong>的功能,都可以自行研究一下.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typora侧边栏文件列表排序-按修改时间]]></title>
        <id>https://www.sunjianbo.com/typora-file-sort/</id>
        <link href="https://www.sunjianbo.com/typora-file-sort/">
        </link>
        <updated>2020-03-31T02:49:30.000Z</updated>
        <content type="html"><![CDATA[<p>Typora侧边栏文件视图默认排序方式是自然排序,即按照数字或者首字母顺序排序.</p>
<p>但是我自己用起来很不方便,比如我新建一个文件,重命名之后就会被排序到列表中间某个位置,不太好找.</p>
<p>所以想要按照修改时间倒序,这样新建的文件就在最上面了.</p>
<p>一开始右键菜单里找了半天没找到,后来才发现<strong>在列表的最下面</strong>.</p>
<p>非常简单如图操作,<strong>切换升序降序只需要再多点击一次图标就行</strong>:</p>
<figure data-type="image" tabindex="1"><img src="http://static.sunjianbo.com/20200331104630.png" alt="click" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="http://static.sunjianbo.com/20200331104806.png" alt="sort" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[github pages url重定向的变相解决方法]]></title>
        <id>https://www.sunjianbo.com/github-pages-rewrite/</id>
        <link href="https://www.sunjianbo.com/github-pages-rewrite/">
        </link>
        <updated>2020-03-12T02:07:10.000Z</updated>
        <content type="html"><![CDATA[<p>这也是从WordPress迁移到Gridea&amp;github pages的后遗症之一.</p>
<p>我在WP那边的url格式是https://www.sunjianbo.com/xxx.html,而弄好Gridea之后发现url格式是https://www.sunjianbo.com/post/xxx/.因为是老站嘛,搜索引擎还是有一些关键词可以搜到的,所以昨天发现了问题,从搜索引擎那边链接打开的页面都会404.</p>
<p>我第一个想法就是通过.htaccess做url的rewrite,但是搜索一下发现github pages并不支持这种方式.</p>
<p>好在还知道<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;2; url='/'&quot;&gt;</code>标签可以做页面的定时跳转和刷新,再结合使用<code>&lt;link rel=&quot;canonical&quot; href=&quot;&quot; /&gt;</code>标签来告诉搜索引擎新的规范链接地址.</p>
<p>思路说完了,那么以下是详细步骤:</p>
<h2 id="1修改gridea主题设置">1.修改Gridea主题设置</h2>
<p>开启,精简url模式这是为了去掉url中的/post/,不用gridea的可以无视.<img src="http://static.sunjianbo.com/20200312102504.png" alt="gridea" loading="lazy"></p>
<h2 id="2批量创建html文件">2.批量创建html文件</h2>
<p>我这里通过Python代码遍历post目录下所有文章,提取文件名,替换后缀名,在指定目录生成.html文件.</p>
<p>代码如下:</p>
<pre><code class="language-Python">#conding=utf8
import os
g = os.walk(&quot;D:\IDE\Gridea\Documents\Gridea\posts&quot;)
out = &quot;D:\IDE\Gridea\Documents\Gridea\output\&quot;
for path,dir_list,file_list in g:
    print(len(file_list))
    for file_name in file_list:
        # print(os.path.join(path, file_name) )

        print(os.path.splitext(file_name)[0])
        outName = os.path.splitext(file_name)[0] + &quot;.html&quot;
        with open(out + outName, 'w') as f:  # open()函数可以判断文件是否存在，如果不存在，则创建文件
            myurl = &quot;www.sunjianbo.com/&quot; +os.path.splitext(file_name)[0]
            message = &quot;&quot;&quot;&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=https://myurl/&quot;&gt;
    &lt;link rel=&quot;canonical&quot; href=&quot;https://myurl/&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;&quot;&quot;&quot;
            message = message.replace(&quot;myurl&quot;,myurl)
            f.write(message)
</code></pre>
<h2 id="3上传到github">3.上传到github</h2>
<p>打开.html查看是否没有问题,删除多余的没用文件,比如我这里还生成了一个<code>.DS_Store.html</code>*´∀`)</p>
<p>然后手动上传到github,不能通过Gridea上传因为他会清空output目录自己再生成一遍文章,我们的html文件会在同步前被删除.</p>
<p>到output目录打开终端</p>
<pre><code class="language-git">git add .
git commit -m &quot;for rewrite&quot;
git pustt
</code></pre>
<p>当然网页上传也可以,不过上传文件限制一次100,文章多的话更麻烦一点.</p>
<h2 id="4最后到搜索引擎搜索关键字测试一下吧">4.最后到搜索引擎搜索关键字测试一下吧.</h2>
<h2 id="ps可以将html文件上传github的不同目录来满足不同url格式的支持">PS:可以将.html文件上传github的不同目录来满足不同url格式的支持.</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea主题修改之自动摘要]]></title>
        <id>https://www.sunjianbo.com/gridea-auto-excerpt/</id>
        <link href="https://www.sunjianbo.com/gridea-auto-excerpt/">
        </link>
        <updated>2020-03-11T06:42:55.000Z</updated>
        <summary type="html"><![CDATA[<p>Gridea的部分主题并不带有自动摘要功能,如果需要摘要得先在文章中手动插入<code>&lt;!--more--&gt;</code>标记.否则首页就是光溜溜的一片标题,看起来很不舒服.</p>
<p>而且像我这样直接从WordPress迁移很多文章过来的也不可能挨篇文章去加<code>&lt;!--more--&gt;</code>标记,所以动手修改主题以达到首页自动显示摘要的目的.</p>
<p>本文以Gridea自带主题&lt;Simple1.1.0&gt;为例,讲述如何通过js代码修改添加自定义配置并完成自动摘要功能,修改方法大同小异,其他主题也可以参考.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Gridea的部分主题并不带有自动摘要功能,如果需要摘要得先在文章中手动插入<code>&lt;!--more--&gt;</code>标记.否则首页就是光溜溜的一片标题,看起来很不舒服.</p>
<p>而且像我这样直接从WordPress迁移很多文章过来的也不可能挨篇文章去加<code>&lt;!--more--&gt;</code>标记,所以动手修改主题以达到首页自动显示摘要的目的.</p>
<p>本文以Gridea自带主题&lt;Simple1.1.0&gt;为例,讲述如何通过js代码修改添加自定义配置并完成自动摘要功能,修改方法大同小异,其他主题也可以参考.</p>
<!--more-->
<h2 id="1增加自定义配置">1.增加自定义配置</h2>
<p>编辑文件<code>%Gridea%\themes\simple\config.json</code>,<code>%Gridea%</code>就是Gridea设置中的站点源文件路径.</p>
<p>在合适的位置上添加以下代码:</p>
<pre><code class="language-js">	{
      &quot;name&quot;: &quot;is_auto_excerpt&quot;,
      &quot;label&quot;: &quot;是否启用自动摘要&quot;,
      &quot;group&quot;: &quot;自动摘要&quot;,
      &quot;value&quot;: true,
      &quot;type&quot;: &quot;switch&quot;
    },
    {
      &quot;name&quot;: &quot;auto_excerpt_line&quot;,
      &quot;label&quot;: &quot;自动摘要选取行数&quot;,
      &quot;group&quot;: &quot;自动摘要&quot;,
      &quot;value&quot;: &quot;3&quot;,
      &quot;type&quot;: &quot;input&quot;
    },
</code></pre>
<p>就完成了主题的页面设置功能,自动摘要选取的行数可以自定义</p>
<p>效果图:</p>
<figure data-type="image" tabindex="1"><img src="http://static.sunjianbo.com/gridea-auto-excerpt/image-20200311142153575.png" alt="image-20200311142153575" loading="lazy"></figure>
<h2 id="2首页编写自动摘要功能">2.首页编写自动摘要功能</h2>
<p>编辑文件<code>%Gridea%\themes\simple\templates\index.ejs</code>在如图所示位置添加代码:</p>
<figure data-type="image" tabindex="2"><img src="http://static.sunjianbo.com/gridea-auto-excerpt/image-20200311142947299.png" alt="image-20200311142947299" loading="lazy"></figure>
<pre><code class="language-js">&lt;% if (post.abstract) { %&gt;
	&lt;!-- 有手动摘要则加个more链接 --&gt;
	&lt;a href=&quot;&lt;%= post.link %&gt;&quot;&gt;more →&lt;/a&gt;
&lt;% } else if (site.customConfig.is_auto_excerpt) { %&gt;
	&lt;!-- 没有手动摘要切开启了自动摘要,则根据配置筛除摘要内容 --&gt;
	&lt;% var br_position = 0 %&gt;
	&lt;% for (var br_count = 0; br_count &lt; site.customConfig.auto_excerpt_line; br_count++) { %&gt;
		&lt;% br_position = post.content.indexOf('\n',br_position + 1) %&gt;
		&lt;% if(br_position &lt; 0) { break } %&gt;
	&lt;% } %&gt;
	&lt;% if(br_position &gt; 0) { %&gt;
		&lt;p&gt;&lt;%- post.content.substring(0, br_position + 1) %&gt;
			&lt;% if(post.content.substring(0, br_position + 1).indexOf(&quot;&lt;code&quot;) &gt; 0) { %&gt;
				&lt;!-- 自动摘要出来的内容有&lt;code则补上结尾,防止格式错误 --&gt;
				&lt;/code&gt;&lt;/pre&gt;
			&lt;% } %&gt;
		&lt;p&gt;
		&lt;!-- 加个more链接 --&gt;
		&lt;a href=&quot;&lt;%= post.link %&gt;&quot;&gt;more →&lt;/a&gt;
	&lt;% } %&gt;
&lt;% } %&gt;
</code></pre>
<h2 id="3保存重启gridea预览查看效果">3.保存重启Gridea预览查看效果</h2>
<h2 id="4优化">4.优化</h2>
<p>接下来是一个小优化,调整了一下<code>more →</code>的的样式,看起来更顺眼一些.</p>
<p>编辑文件<code>%Gridea%\themes\simple\assets\styles\main.less</code>在最后添加:</p>
<pre><code class="language-css">.post-item .left .post-abstract a {
  color: #4c6ef5;
  border-bottom: 1px dotted #4c6ef5;
  transition: all 0.3s;
}
</code></pre>
<p>效果图</p>
<figure data-type="image" tabindex="3"><img src="http://static.sunjianbo.com/gridea-auto-excerpt/image-20200311150147647.png" alt="image-20200311150147647" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[WordPress文章导出迁移到Gridea]]></title>
        <id>https://www.sunjianbo.com/wordpress-to-gridea/</id>
        <link href="https://www.sunjianbo.com/wordpress-to-gridea/">
        </link>
        <updated>2020-03-10T04:12:05.000Z</updated>
        <summary type="html"><![CDATA[<ul>
<li>
<p><a href="https://gridea.dev/">Gridea</a>是一个静态博客写作客户端,类似hexo,hugo等,不过可以全面图形化操作,更简单,更方便.</p>
</li>
<li>
<p>本次导出主要基于<a href="https://github.com/sunjianbo/WordPress-to-Gridea-Exporter">WordPress to Gridea Exporter</a>插件,是我根据<a href="https://github.com/SchumacherFM/wordpress-to-hugo-exporter/">WordPress to Hugo Exporter<br>
</a>简单修改而来,感谢原作者(<sup>人</sup>)</p>
</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<ul>
<li>
<p><a href="https://gridea.dev/">Gridea</a>是一个静态博客写作客户端,类似hexo,hugo等,不过可以全面图形化操作,更简单,更方便.</p>
</li>
<li>
<p>本次导出主要基于<a href="https://github.com/sunjianbo/WordPress-to-Gridea-Exporter">WordPress to Gridea Exporter</a>插件,是我根据<a href="https://github.com/SchumacherFM/wordpress-to-hugo-exporter/">WordPress to Hugo Exporter<br>
</a>简单修改而来,感谢原作者(<sup>人</sup>)</p>
</li>
</ul>
<!-- more -->
<blockquote>
<p>注意:如果你使用了类似WP Database Backup等备份插件,记得去删除一些历史的备份文件,否则导出文件可能会很大</p>
</blockquote>
<h2 id="操作方法">操作方法</h2>
<ol>
<li>
<p>登陆wordpress后台通过快速编辑将每一篇文章的别名修改为英文,否则导出的文章会出现乱码.虽然gridea能识别,但是链接也会变成乱码,看着闹挺.<br>
<img src="http://static.sunjianbo.com/wordpress-to-gridea/alias.png" alt="alias" loading="lazy"></p>
</li>
<li>
<p>下载WordPress to Gridea Exporter并安装到wordpress上,启用.<br>
<a href="https://github.com/sunjianbo/WordPress-to-Gridea-Exporter/archive/master.zip">https://github.com/sunjianbo/WordPress-to-Gridea-Exporter/archive/master.zip</a></p>
</li>
<li>
<p>点击后台管理菜单的工具--&gt;Export to Hugo然后浏览器会自动下载一个名为hugo-export.zip的文件,所需的东西都在里面了.<br>
<img src="http://static.sunjianbo.com/wordpress-to-gridea/action.png" alt="action" loading="lazy"></p>
</li>
<li>
<p>提取hugo-export.zip文件中的posts文件下的所有md文件到Documents\Gridea\posts目录下(如果不知道该目录在那,查看Gridea的设置)</p>
</li>
<li>
<p>重启Gridea查看并预览是否已经读取到相关文章</p>
</li>
<li>
<p>wordpress中隐藏的文章全部设为草稿了,如需发布自行编辑一下</p>
</li>
<li>
<p>文章中的图片有可能需要重新处理一下,wp媒体库的图片在压缩包中wp-content/uploads目录中</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Chrome开发者工具查看元素绑定的事件]]></title>
        <id>https://www.sunjianbo.com/chrome-kai-fa-zhe-gong-ju-cha-kan-yuan-su-bang-ding-de-shi-jian/</id>
        <link href="https://www.sunjianbo.com/chrome-kai-fa-zhe-gong-ju-cha-kan-yuan-su-bang-ding-de-shi-jian/">
        </link>
        <updated>2020-03-09T08:59:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="方法一">方法一</h2>
<p>1.右键检查or手动打开开发者工具,选中对应元素<br>
2.点击Event Listeners标签<br>
<img src="http://static.sunjianbo.com/Chrome%20Developer%20Tools%20view%20Listeners/step1.1.png" alt="step1.1" loading="lazy"><br>
3.取消勾选Ancestors All以筛选出指定选中元素对应的事件<br>
<img src="http://static.sunjianbo.com/Chrome%20Developer%20Tools%20view%20Listeners/step1.2.png" alt="step1.2" loading="lazy"></p>
<h2 id="方法二">方法二</h2>
<p>有时会发生方法一无法看到对应的事件,取消勾选Ancestors All以后一片空白,可以试试方法二.<br>
1.打开开发者工具,切换到Sources标签页<br>
<img src="http://static.sunjianbo.com/Chrome%20Developer%20Tools%20view%20Listeners/step2.1.png" alt="step2.1" loading="lazy"><br>
展开Event Listeners Breakpoints,寻找指定事件勾选(我这里用click事件举例),这里相当于对相关事件下了断点<br>
<img src="http://static.sunjianbo.com/Chrome%20Developer%20Tools%20view%20Listeners/step2.2.png" alt="step2.2" loading="lazy"><br>
3.然后去操作页面来触发事件,这时就会进入断点,逐步寻找到你需要的代码.比较麻烦,无奈之举.<br>
<img src="http://static.sunjianbo.com/Chrome%20Developer%20Tools%20view%20Listeners/step2.3.png" alt="step2.3" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea——github pages搭建个人博客利器]]></title>
        <id>https://www.sunjianbo.com/gridea-github-page-li-qi/</id>
        <link href="https://www.sunjianbo.com/gridea-github-page-li-qi/">
        </link>
        <updated>2020-02-25T07:42:55.000Z</updated>
        <content type="html"><![CDATA[<p>以前也想过搞github pages做博客,但是一搜教程看着那一步步超级麻烦的操作步骤,无奈放弃.<br>
今天浏览网站时无意中发现了Gridea,顿时惊为天人.<br>
它提供一个美观方便的客户端工具,以此简化了github pages的操作方法.使小白也能简简单单搭建一个个人博客了.<br>
同时还支持MarkDown,简直不能再妙!</p>
<h2 id="官方网站">官方网站:</h2>
<p><a href="https://gridea.dev/">https://gridea.dev/</a></p>
<h2 id="github主页">github主页:</h2>
<p><a href="https://github.com/getgridea/gridea">https://github.com/getgridea/gridea</a></p>
<h2 id="简单教程">简单教程:</h2>
<p><a href="https://fehey.com/post/hve-notes-start/">https://fehey.com/post/hve-notes-start/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[springboot通过java -jar运行实现ApplicationContextAware接口报空指针NUllPointerException]]></title>
        <id>https://www.sunjianbo.com/springboot-applicationcontextaware-nullpointerexception/</id>
        <link href="https://www.sunjianbo.com/springboot-applicationcontextaware-nullpointerexception/">
        </link>
        <updated>2019-07-22T00:06:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="先描述背景">先描述背景：</h2>
<p>自定义了一个实现ApplicationContextAware的自定义类，之前测试都是用IDE的run as application方式启动项目，没有错误。</p>
<p>后来打包成jar文件通过java -jar运行即报空指针异常</p>
<blockquote>
<p>Caused by: java.lang.NullPointerException: null<br>
at com.ceair.b2t.messagecenter.SpringContextUtil.getBean(SpringContextUtil.java:41) ~[classes!/:na]</p>
</blockquote>
<h2 id="原因">原因:</h2>
<p>直接原因是applicationContext为空，即没有注入</p>
<p>背后的原因是实现ApplicationContextAware的自定义类和使用applicationContext的类加载顺序问题。</p>
<p><strong>一定要把定义的ApplicationContextAware工具类加载顺序放到调用类的前面</strong></p>
<h2 id="解决方案">解决方案:</h2>
<p>就是在调用类上添加注解</p>
<pre><code>@DependsOn(&quot;springContextUtil&quot;)
</code></pre>
<p>该注解用于声明当前bean依赖于另外一个bean。所依赖的bean会被容器确保在当前bean实例化之前被实例化。</p>
<p>题外话：</p>
<p>这样看来两种run项目方式至少在类加载顺序上是有区别的</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[FileZilla支持Windows XP版本官方下载地址]]></title>
        <id>https://www.sunjianbo.com/filezilla-for-windows-xp-download/</id>
        <link href="https://www.sunjianbo.com/filezilla-for-windows-xp-download/">
        </link>
        <updated>2019-04-09T17:59:04.000Z</updated>
        <content type="html"><![CDATA[<p>FileZilla很早就已经不支持xp系统了</p>
<p>3.9.0.1是最后一个支持的版本</p>
<p>网上不太好找官方的下载地址，都是第三方的，安全性无法保证。</p>
<p>所以为了方便一些特殊用户，我找到以后写了出来</p>
<p>下面是官方下载地址：</p>
<p><a href="https://download.filezilla-project.org/client/FileZilla_3.9.0.1_win32-setup.exe?nowrap">https://download.filezilla-project.org/client/FileZilla_3.9.0.1_win32-setup.exe?nowrap</a></p>
<p>备注：</p>
<p>安装时会提示不支持，可以忽略，能够正常使用，查看更新日志，应该是在3.8以后停止支持的，但是后面还兼容了一段时间。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最简单解决linux解压缩乱码问题]]></title>
        <id>https://www.sunjianbo.com/the-easiest-solution-to-linux-decompression-garbled/</id>
        <link href="https://www.sunjianbo.com/the-easiest-solution-to-linux-decompression-garbled/">
        </link>
        <updated>2018-12-25T18:07:26.000Z</updated>
        <content type="html"><![CDATA[<p>因为在windows下压缩的文件是使用(gbk,gb18030)编码的，所以在linux(utf-8)下面直接解压有编码问题</p>
<p>网上说的unzip -O之类的都不太靠谱</p>
<p>后来终于找到一个最简单的方法，几乎没什么成本。</p>
<p>就是安装<code>unzip-natspec</code>来替换<code>unzip</code></p>
<pre><code>yay -Ss unzip-natspec
#unzip-natspec 与 unzip 有冲突。删除 unzip 吗？ [y/N]y
</code></pre>
<p>unzip-natspec可以自动识别文件编码，用法和unzip一样，直接&quot;unzip xxx.zip&quot;即可，非常方便！</p>
]]></content>
    </entry>
</feed>